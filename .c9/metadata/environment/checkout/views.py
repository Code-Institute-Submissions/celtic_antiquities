{"filter":false,"title":"views.py","tooltip":"/checkout/views.py","undoManager":{"mark":16,"position":16,"stack":[[{"start":{"row":0,"column":0},"end":{"row":61,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404, reverse, redirect","from django.contrib.auth.decorators import login_required","from django.contrib import messages","from .forms import MakePaymentForm, OrderForm","from .models import OrderLineItem","from django.conf import settings","from django.utils import timezone","from products.models import Product","import stripe","","# Create your views here.","stripe.api_key = settings.STRIPE_SECRET","","","@login_required()","def checkout(request):","    if request.method == \"POST\":","        order_form = OrderForm(request.POST)","        payment_form = MakePaymentForm(request.POST)","","        if order_form.is_valid() and payment_form.is_valid():","            order = order_form.save(commit=False)","            order.date = timezone.now()","            order.save()","","            cart = request.session.get('cart', {})","            total = 0","            for id, quantity in cart.items():","                product = get_object_or_404(Product, pk=id)","                total += quantity * product.price","                order_line_item = OrderLineItem(","                    order=order,","                    product=product,","                    quantity=quantity","                )","                order_line_item.save()","            ","            try:","                customer = stripe.Charge.create(","                    amount=int(total * 100),","                    currency=\"GBP\",","                    description=request.user.email,","                    card=payment_form.cleaned_data['stripe_id']","                )","            except stripe.error.CardError:","                messages.error(request, \"Your card was declined!\")","            ","            if customer.paid:","                messages.error(request, \"You have successfully paid\")","                request.session['cart'] = {}","                return redirect(reverse('products'))","            else:","                messages.error(request, \"Unable to take payment\")","        else:","            print(payment_form.errors)","            messages.error(request, \"We were unable to take a payment with that card!\")","    else:","        payment_form = MakePaymentForm()","        order_form = OrderForm()","    ","    return render(request, \"checkout.html\", {\"order_form\": order_form, \"payment_form\": payment_form, \"publishable\": settings.STRIPE_PUBLISHABLE})",""],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":63,"column":12},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404, reverse, redirect","from django.contrib.auth.decorators import login_required","from django.contrib import messages","from .forms import MakePaymentForm, OrderForm","from .models import OrderLineItem","from django.conf import settings","from django.utils import timezone","from products.models import Product","import stripe","","","# Create your views here.","","stripe.api_key = settings.STRIPE_SECRET","","@login_required()","def checkout(request):","    if request.method==\"POST\":","        order_form = OrderForm(request.POST)","        payment_form = MakePaymentForm(request.POST)","        ","        if order_form.is_valid() and payment_form.is_valid():","            order = order_form.save(commit=False)","            order.date = timezone.now()","            order.save()","            ","            cart = request.session.get('cart', {})","            total = 0","            for id, quantity in cart.items():","                product = get_object_or_404(Product, pk=id)","                total += quantity * product.price","                order_line_item = OrderLineItem(","                    order = order, ","                    product = product, ","                    quantity = quantity","                    )","                order_line_item.save()","                ","            try:","                customer = stripe.Charge.create(","                    amount = int(total * 100),","                    currency = \"EUR\",","                    description = request.user.email,","                    card = payment_form.cleaned_data['stripe_id'],","                )","            except stripe.error.CardError:","                messages.error(request, \"Your card was declined!\")","                ","            if customer.paid:","                messages.error(request, \"You have successfully paid\")","                request.session['cart'] = {}","                return redirect(reverse('products'))","            else:","                messages.error(request, \"Unable to take payment\")","        else:","            print(payment_form.errors)","            messages.error(request, \"We were unable to take a payment with that card!\")","    else:","        payment_form = MakePaymentForm()","        order_form = OrderForm()","        ","    return render(request, \"checkout.html\", {'order_form': order_form, 'payment_form': payment_form, 'publishable': settings.STRIPE_PUBLISHABLE})","                ","            "],"id":3}],[{"start":{"row":41,"column":34},"end":{"row":41,"column":35},"action":"remove","lines":["R"],"id":4},{"start":{"row":41,"column":33},"end":{"row":41,"column":34},"action":"remove","lines":["U"]},{"start":{"row":41,"column":32},"end":{"row":41,"column":33},"action":"remove","lines":["E"]}],[{"start":{"row":41,"column":32},"end":{"row":41,"column":33},"action":"insert","lines":["G"],"id":5}],[{"start":{"row":41,"column":33},"end":{"row":41,"column":34},"action":"insert","lines":["B"],"id":6},{"start":{"row":41,"column":34},"end":{"row":41,"column":35},"action":"insert","lines":["P"]}],[{"start":{"row":61,"column":45},"end":{"row":61,"column":46},"action":"remove","lines":["'"],"id":7}],[{"start":{"row":61,"column":45},"end":{"row":61,"column":46},"action":"insert","lines":["\""],"id":8}],[{"start":{"row":61,"column":56},"end":{"row":61,"column":57},"action":"remove","lines":["'"],"id":9}],[{"start":{"row":61,"column":56},"end":{"row":61,"column":57},"action":"insert","lines":["\""],"id":10}],[{"start":{"row":61,"column":71},"end":{"row":61,"column":72},"action":"remove","lines":["'"],"id":11}],[{"start":{"row":61,"column":71},"end":{"row":61,"column":72},"action":"insert","lines":["\""],"id":12}],[{"start":{"row":61,"column":84},"end":{"row":61,"column":85},"action":"remove","lines":["'"],"id":13}],[{"start":{"row":61,"column":84},"end":{"row":61,"column":85},"action":"insert","lines":["\""],"id":14}],[{"start":{"row":61,"column":101},"end":{"row":61,"column":102},"action":"remove","lines":["'"],"id":15}],[{"start":{"row":61,"column":101},"end":{"row":61,"column":102},"action":"insert","lines":["\""],"id":16}],[{"start":{"row":61,"column":113},"end":{"row":61,"column":114},"action":"remove","lines":["'"],"id":17}],[{"start":{"row":61,"column":113},"end":{"row":61,"column":114},"action":"insert","lines":["\""],"id":18}]]},"ace":{"folds":[],"scrolltop":900,"scrollleft":0,"selection":{"start":{"row":63,"column":12},"end":{"row":63,"column":12},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1569426605062,"hash":"355ea5abcdb8e00875ddcd1656c8f8366f8af11b"}